
万物皆对象
类是多个具有相同属性和行为的对象所抽象出来的

类三个特性：封装，继承，多态

封装：隐藏细节，外界不需要访问的成员变量，方法私有化，内容对外不可见
继承：子类继承父类属性方法，并进行拓展
多态：同一种类型对象执行同一个方法表现不同的行为特征
1、继承的上下转型 2、接口回调 3、方法的重写重载

三大思想：
OOA：面向对象分析(Object Oriented Analysis)
OOD：面向对象设计(Design)
OOP：面向对象编程(Programming)

注意：
1、类写在java文件中
2、一个java文件中可以有N个类，但只能存在一个public修饰的类
3、java文件命名必须与public修饰的一致
4、同一个包中不能有相同命名的类

匿名对象：
栈内存中无对象名，堆内存中有对象，使用完会触发GC，只使用一次
int num=new Math().count(10,20)

栈 堆：

栈：局部变量
堆：普通成员变量
元数据/方法区：静态成员变量，静态方法

栈：
FILO，2M左右，读取速度快，仅次于PC寄存器，明确移动大小和范围（固定数据大小，影响灵活性）

int a =10; 
Person p = new Person(); 
栈：a 基本数据类型 p 对象的引用
堆：实际Person对象

堆： 
GC
新生代：Eden区（新创建对象） Survior区（经过1-15次垃圾回收）
养老区：15次之后幸存
永久区（非堆空间）：自带class，interface，关闭 jvm 才会释放
示例：
public static void main(String[] args){
    String s1 = "123456";
    String s2 = "123456";
    System.out.println(s1==s2)//结果：true-----------第一次定义s1存放在堆中的永久区，所以第二次属于调用
}


方法区：HotSpot中逻辑上独立，实际包含在java堆中（永久区是方法区的实现）
！！！！！！！方法区被所有线程共享！！！！！！
静态变量、常量、类信息（构造方法，接口定义）、运行时常量池（static 修饰的成员）

jdk1.7之前：运行时常量池（包括字符串常量池）存放在方法区，方法区实现—>永久代
jdk1.7：字符串常量池—>堆中，运行时常量池—>方法区，方法区实现—>永久代
jdk1.8：字符串常量池—>堆，运行时常量池—>方法区，方法区实现—>元空间


常量池：位于堆内存，每个类编译后产生的，存放常量，字面量，引用

方法区：包含了代码中用到的信息，静态变量，常量，各个线程共享，1.7及之前：永久代 1.8之后：元空间

永久代：方法区的一种实现，存储静态资源、

字符串常量池：存储字符串对象，字面量，位于堆中，但与堆区别开，不GC

堆：启动虚拟机创建，所有线程共享，存放对象实例



字符串拼接会产生垃圾，消耗内存，尽量避免
示例：
锄禾日当午+汗滴禾下土+床前明月光
垃圾：锄禾日当午，锄禾日当午汗滴禾下土

PC寄存器：存放下一条jvm指令，每个线程一个



内部类：

1、成员内部类（定义在类内）
访问外部类所有属性方法，会有隐藏现象
外部类.this.成员变量/方法

class Outer{
	private int x;
	class Inner{
		sout(Outer.this.x)
	}	
}

2、局部内部类（方法，构造函数，代码块内）
只能访问不可改变的变量(final类型，1.8后默认为final类型)，因为可能局部内部类对象在方法结束后继续存在，引用的变量可能会更新导致过期
可以不继承某个类或者实现某个接口

//窗口关闭
public static void main(String[] args){
    Frame f=new Frame("QQ登陆器");
    f.setVisible(true);
    f.setSize(300,200);
    class MyWindowListener implements WindowListener{
        @Override
        public void windowClosing(WindowEvent e){
            System.out.println("哈哈哈");
        }
    }
    MyWindowListener l=new MyWindowListener();
    //想要添加一个窗口关闭的事件，可以使用局部类
    f.addWindowListener(l);
}

3、匿名内部类（属于局部内部类）
实现一个接口或继承一个类
无构造函数，静态成员或方法
不能是抽象的

new 父类（参数）/ 接口{}

interface Person{
	public void say();
}

public class Demo{
	psvm{
		Person P = new Person(){
			重写say()方法
		}
		使用P对象
	}
}

4、静态内部类
static 修饰
不依赖于外部类对象（类似静态成员属性）
注意：不能访问外部类中的非staic成员变量和方法

public class Demo { 
    public static void main(String[] args) { 
        Book.Info info = new Book.Info(); 
        info.say();

	// new Book.Info().say();一行这个也行
    }
}
class Book { 
    static class Info { 
        public void say(){
            System.out.println("这是一本书");
        }
    } 
}




包装类：

Object 的直接子类：Character、Boolean
Number ：Integer 等等

初始值null，在集合类中使用较多

引用数据类型：Integer,Character
Integer i = new Integer(10)

补充：引用数据类型：存储对象的引用（内存地址）数组，类的对象，接口对象
数字是Number子类，Character和Boolean是Object子类

jdk1.4 包装类构造方法
int i=10;
Integer x = new Integer(i);

>jdk1.5 自动装箱拆箱，包装类可以运算
Integer i = 10;
int x=i;

字符串转换：parseInt/parseFloat/parseBoolean 接收数据

重点：
Integer a=1000,b=1000;
System.out.println(a==b);// false






抽象类：

可以没有抽象方法（可以有具体方法），但抽象方法必须写在抽象类或接口中
抽象方法：只声明未实现（没有{}），必须用abstract声明
必须用 public 和 protected 修饰，默认 public 缺省，private 子类无法继承
无法多继承

abstract class 类名{ 
	public abstract void 方法名() ; // 抽象方法，只声明而未实现
}

！！！不能被实例化！！！
不能new（jvm 可以创建实例化对象）
必须被子类继承，子类（不是抽象类）必须重写所有抽象方法

常见问题：
1、抽象类能否使用 final 声明
不能，final修饰的类不能有子类，抽象类必须有子类 extend

2、抽象类能否有构造方法
可以，实例化和普通类相同，先调用父类构造方法（默认无参），再调用子类的构造方法



接口：（to-do）
全是抽象方法（java 8 之后也可以有普通方法，默认方法，静态方法）+全是全局常量（无构造方法）
不能有静态方法，静态方法不能被子类重写
定义（规范、约束）+ 实现（名实分离）耦合性，易拓展，维护
interface 接口名称{ 
    全局常量 ; public static final int VALUE=10；（可以省略public static final）
    抽象方法 ; public abstract void do()；(可以省略 abstract void)
}
实现多接口，实现所有方法 implents

继承 entends 父子类继承
只允许单继承，多重继承

super调用父类构造方法，属性


多态：

对象多种表现形式（子类是父类的一种多态形式）
方法的多态：
重载：一个类中方法多态性
重写：子父类中方法多态性

向上转型 Person person = stdudent; person.say() 调用子类的方法，不能调用子类特有方法
向下转型 Student student2 = (Student) person


instanceof

Object类，可以接受任意引用数据类型
重写toString方法，输出对象字符串形式，不然就是返回对象内存地址
重写equals方法：自反，对称，传递，一致，非空
举例：
    public boolean equals(Object o){
        //判断内存地址是否相同
        if(this==o){
            return true;
        }
        //非空性
        if(o==null){
            return false;
        }
        //判断是否是同一个类
        if(o instanceof Person){
            //向下转型
            Person p2=(Person)o;
            //此处调用的是String里的equals()方法，和Object不同
            if(this.name.equals(p2.name)&&this.age==p2.age){
                return true;
            }
        }
        return false;
    }

注意：equals等价，== 比较地址


> jdk1.5 可变参数 
int sum(int... nums){}数组形式接收

递归消耗内存，可以尾递归（最后一次操作是递归，后无操作），循环




异常处理：

出现异常正确处理，而不是结束

try-catch 自动生成异常类的实例化对象
异常在try内，找catch根据方法参数匹配对象，匹配成功用该catch处理
不在try内，抛出
（得想办法解决异常）

finally：异常统一出口
电脑关机，System.exit(0)退出虚拟机，不会执行finally

注意：
        int a = 10;
        try{
            return a;
        }catch(Exception e){
            return null;
        }finally{
            a = 20;
        }
返回10，基本数据类型，在栈中备份第一次10
        try{
            p.age=18;
            return p;
        }catch(Exception e){
            return null;
        }finally{
            p.age=28;
        }
返回28，引用数据类型，返回地址

异常：Exception 类
Throwable两个子类，Error jvm错误操作，Exception 类程序所有错误（受检异常，非受检异常）
1、更粗异常不能在更细异常之前
2、方便，所有异常Exception

throws关键字主要在方法的声明上使用，表示方法中不处理异常，而交给调用处处理。
经常处理传参异常
好处：
1、告诉调用者可能抛出哪些异常，可以使用try catch 正确捕获
2、当前方法中不用try catch ，编译不通过可以丢给上层调用者处理

子类不能抛出比父类更大的异常

throw和throws区别：
1、throw用于方法内部，手动抛出一个异常对象，是个可执行语句
2、throws是方法声明，声明异常类型，后面跟多个异常对象


Throwable
1. Error  VirtualMachineError包括（堆内存溢出 OutOfMemoryError 栈内存溢出 StackOverflowError）和 AWTError
2. Exception:
	    1) RuntimeExcetion:
			    NumberFormatException等等 不用try-catch也可以处理，有JVM处理
	    2) IOException等等

自定义异常可以给维护人员发邮件等等
1）必须继承Throwable或它的子类，一般开发中继承RuntimeException和Exception
2）保留两种构造器形式
无参构造
带给父类message属性赋值的构造器
    public MoneyCannotNegativeException() {
        super();
    }

    public MoneyCannotNegativeException(String message) {
        super(message);
    }


异常对象常用方法：
1、e.printStackTrace()：打印异常对象跟踪信息
2、e.getMessage()：返回异常对象简单错误提示

System.err.println()：红色字体
Sout：正常

释放资源，断开连接：只有 try...finally...
注意 finally 与 return 混用


< jdk1.7 手动或关闭资源，捕获异常等
jdk1.7 try-with-resource 自动关闭，try()小括号中的对象必须实现AutoCloseable
jdk1.9 try()小括号内可以多个对象
自定义实现 Closeable 对象




子类访问权限必须和父类相同或更高，否则方法不再可见
static 和 private 的不能被重写


Java 源代码->编译生成 Java 字节码 -> JVM 虚拟机 -> windows linux Solaris

static 修饰成员变量，成员方法，不依赖于对象，类被加载就能访问

属性(类里定义的标识符称为属性)
变量(方法体里定义的标识符成为变量

final 修饰的成员属性，必须在声明时赋值
final 修饰的类不能被继承
final 修饰的方法不能被子类重写

类中避免逻辑错误，将成员属性封装成 private，然后用 Getter Setter 方法


构造代码块：在所有构造方法之前执行
静态代码块：类加载时只执行一次
普通代码块：就是{}的范围
执行顺序：静态 -> 构造 -> 普通


域名不会重复，开发包命名可以用域名












