注解：

概念：为Java代码提供元数据
属于一种类型，和 Class 和 interface 一样

Java5 开始添加

理解：注解就像标签

定义一个 TestAnnotation 注解
public @interface TestAnnotation {
}

使用注解
@TestAnnotation
public class Test {
}

元注解：标签的基础标签

@Retention	存活时间生命周期，相当于给一个注解一个时间戳
@Retention(Retention.SOURCE)	源码阶段保留，编译时忽视
Retention.CLASS			保留到编译进行，不被加载到 JVM
Retention.RUNTIME			会被加载到 JVM ，可以被获取
代码：
@Retention(RetentionPolicy.RUNTIME)
public @interface TestAnnotation {
}

@Documented	文档，将注解中的元素加载到 Javadoc 里

@Target		目标，指定运用地方
ElementType.ANNOTATION_TYPE
ElementType.CONSTRUCTOR

@Inherited
注解 Test 被 @Inherited 修饰，之后类 A 被 Test 注解，类 B 继承 A,类 B 也拥有 Test 这个注解。

@Repeatable
可重复，1.8 引入
注解的值可以取多个

容器注解：
存放其他注解的地方，本身也是一个注解	



注解的属性：

注解只有成员变量，无方法
举例：
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface TestAnnotation {
    public int id() default -1;
    public String msg() default "Hi";
}

@TestAnnotation(id=3,msg="hello annotation")
public class Test {
}



Java 预置的注解：

@Deprecated
标记过时的元素方法，编译会警告，会有横杠

@Override
重写

@SuppressWarnings
阻止警告
举例：
@SuppressWarnings("deprecation")
public void test1(){
    Hero hero = new Hero();
    hero.say();
    hero.speak();
}

@SafeVarargs
1.7 引入，参数安全类型注解
举例：
@SafeVarargs // Not actually safe!
    static void m(List<String>... stringLists) {
    Object[] array = stringLists;
    List<Integer> tmpList = Arrays.asList(42);
    array[0] = tmpList; // Semantically invalid, but compiles without warnings
    String s = stringLists[0].get(0); // Oh no, ClassCastException at runtime!
}


@FunctionalInterface
函数式接口，具有一个方法的普通接口
Runnable 就是函数式接口，可以很容易转换为 Lambda 表达式


注解提取：

通过反射获取注解

举例：
@TestAnnotation()
public class Test {
    public static void main(String[] args) {
        boolean hasAnnotation = Test.class.isAnnotationPresent(TestAnnotation.class);
        if ( hasAnnotation ) {
            TestAnnotation testAnnotation = Test.class.getAnnotation(TestAnnotation.class);
            System.out.println("id:"+testAnnotation.id());
            System.out.println("msg:"+testAnnotation.msg());
        }
    }
}

运行结果：
id:-1
msg:

属性，方法注解一样可以：
@TestAnnotation(msg="hello")
public class Test {
    @Check(value="hi")
    int a;
    @Perform
    public void testMethod(){}
    @SuppressWarnings("deprecation")
    public void test1(){
        Hero hero = new Hero();
        hero.say();
        hero.speak();
    }
    public static void main(String[] args) {
        boolean hasAnnotation = Test.class.isAnnotationPresent(TestAnnotation.class);
        if ( hasAnnotation ) {
            TestAnnotation testAnnotation = Test.class.getAnnotation(TestAnnotation.class);
            //获取类的注解
            System.out.println("id:"+testAnnotation.id());
            System.out.println("msg:"+testAnnotation.msg());
        }
        try {
            Field a = Test.class.getDeclaredField("a");
            a.setAccessible(true);
            //获取一个成员变量上的注解
            Check check = a.getAnnotation(Check.class);
            if ( check != null ) {
                System.out.println("check value:"+check.value());
            }
            Method testMethod = Test.class.getDeclaredMethod("testMethod");
            if ( testMethod != null ) {
                // 获取方法中的注解
                Annotation[] ans = testMethod.getAnnotations();
                for( int i = 0;i < ans.length;i++) {
                    System.out.println("method testMethod annotation:"+ans[i].annotationType().getSimpleName());
                }
            }
        } catch (NoSuchFieldException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            System.out.println(e.getMessage());
        } catch (SecurityException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            System.out.println(e.getMessage());
        } catch (NoSuchMethodException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            System.out.println(e.getMessage());
        }
    }
}

结果：
id:-1
msg:hello
check value:hi
method testMethod annotation:Perform

注意，注解在运行时被成功获取， @Retention(RetentionPolicy.RUNTIME) 必须要有


注解不会改变代码本身
1、提供信息给编译器
2、编译阶段的处理
3、运行时处理


给 编译器 或者 APT 用
开发者需要提供相应代码来提取处理 Annotation 信息，统称为 APT(Annotation Processing Tool)


自定义注解完成某个目的

比如 @jiecha 注解用来测试代码
需要测试的代码：
package ceshi;
import ceshi.Jiecha;
public class NoBug {
    @Jiecha
    public void suanShu(){
        System.out.println("1234567890");
    }
    @Jiecha
    public void jiafa(){
        System.out.println("1+1="+1+1);
    }
    @Jiecha
    public void jiefa(){
        System.out.println("1-1="+(1-1));
    }
    @Jiecha
    public void chengfa(){
        System.out.println("3 x 5="+ 3*5);
    }
    @Jiecha
    public void chufa(){
        System.out.println("6 / 0="+ 6 / 0);
    }
    public void ziwojieshao(){
        System.out.println("我写的程序没有 bug!");
    }
}


自定义一个注解：
package ceshi;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
@Retention(RetentionPolicy.RUNTIME)
public @interface Jiecha {
}


编写 APT，测试类 TestTool 测试 NoBug 相应方法
package ceshi;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
public class TestTool {
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        NoBug testobj = new NoBug();
        Class clazz = testobj.getClass();
        Method[] method = clazz.getDeclaredMethods();
        //用来记录测试产生的 log 信息
        StringBuilder log = new StringBuilder();
        // 记录异常的次数
        int errornum = 0;
        for ( Method m: method ) {
            // 只有被 @Jiecha 标注过的方法才进行测试
            if ( m.isAnnotationPresent( Jiecha.class )) {
                try {
                    m.setAccessible(true);
                    m.invoke(testobj, null);
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    //e.printStackTrace();
                    errornum++;
                    log.append(m.getName());
                    log.append(" ");
                    log.append("has error:");
                    log.append("\n\r  caused by ");
                    //记录测试过程中，发生的异常的名称
                    log.append(e.getCause().getClass().getSimpleName());
                    log.append("\n\r");
                    //记录测试过程中，发生的异常的具体信息
                    log.append(e.getCause().getMessage());
                    log.append("\n\r");
                } 
            }
        }
        log.append(clazz.getSimpleName());
        log.append(" has  ");
        log.append(errornum);
        log.append(" error.");
        // 生成测试报告
        System.out.println(log.toString());
    }
}


应用实例：
JUint 测试框架
@Test

ssm 框架


注意：注解需要使用到 java 反射，但是 java 反射是解释型，比较慢，有时间成本










































